name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: 
          - windows-2022
          - ubuntu-22.04
        
        llvm:
          - 17.0.6

    runs-on: ${{ matrix.os }}

    steps:
     - uses: actions/checkout@v3
  
     # Add a step to install system dependencies on Ubuntu
     - name: Install system dependencies (Ubuntu)
       if: runner.os == 'Linux'
       run: |
         sudo apt-get update
         sudo apt-get install -y xorg-dev libglu1-mesa-dev libxinerama-dev libxcursor-dev libxi-dev libxrandr-dev pkg-config

     - name: Cache
       uses: actions/cache@v3
       with:
         key: ${{ runner.os }}-llvm-${{ matrix.llvm }}-${{ env.BUILD_TYPE }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}
         restore-keys: |
            ${{ runner.os }}-${{ env.BUILD_TYPE }}-
         path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives

     - name: Setup C++ Environment
       uses: aminya/setup-cpp@v1
       with: 
         vcvarsall: ${{ contains(matrix.os, 'windows') }}
         cmake: true
         ninja: true
         vcpkg: true
         ccache: true
         llvm: ${{ matrix.llvm }}

     - name: Configure CMake
       run: cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake

     - name: Build
       run: cmake --build build -j4

     - name: Test and coverage
       working-directory: ./build
       run: |
         ctest --build-config Debug
        # gcovr -j 4 --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable gcov
